#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('wechat-back:server');
var http = require('http');
// var axios = require('axios');
// var socket = require('../websocket/socket.js')

var async = require('async')
// var mchArr = []
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

var rander = require('../models/rander.js'),
    lottery = require('../controllers/lottery.js'),
    lotteryDetails = require('../controllers/lotteryDetails.js')

var onlineUsers = []
//当前在线人数
var onlineCount = 0

// 当前所有已参与的玩家
var luckerArr = {}
// 管理员socket列表
var lottery_id_arr = {}
var luck_num = {}

var lists = {}
var luckerArr = {}
const rooms = {}

io.on('/lot/connection', function (socket) {
  console.log('a user connected');

  // 用户登录 [1]
  socket.on('login', function (user) {

    //如果含有这个属性说明后台有这个商户

    socket.mch_id = user.mch_id
    socket.nick = user.nick

    // 第一步初始化房间号
    if (!rooms.hasOwnProperty(user.mch_id)) {
      console.log(user.usertype + "初始化房间号=" + user.mch_id)
      rooms[user.mch_id] = {
        mch_id: user.mch_id,
        mch_name: user.mch_name,
        lottery_id: null,
        status: 0,
        setting:null,
        userArr: []
      }
    }

    // 刷新后已存在socket,覆盖
    if (!onlineUsers.hasOwnProperty(user.mch_id)) {
      var hasUser = false
      rooms[user.mch_id].userArr.forEach((_) => {
        if (_.nick == user.nick) {
          hasUser = true
          _.socket = socket
        }
      })
      if (!hasUser) {
        // 如果不存在这个用户，则增加
        rooms[user.mch_id].userArr.push({
          // userid: user.userid,
          nick: user.nick,
          socket: socket,
          isPlayer: false,
          isOwner: user.usertype == 1 ? true : false
        })
      }

      // onlineUsers[user.mch_id] = { mch_id: user.mch_id }
      console.log('[login]1-1:-' + user.nick + '加入了[' + user.mch_id + ']号房间');
    }

    // 如果是普通用户、那么检查房间状态
    if (user.usertype == 2) {
      if (rooms[socket.mch_id].status == 1) {
        var userArr = rooms[socket.mch_id].userArr
        var setting = rooms[socket.mch_id].setting
        var __lottery_id = rooms[socket.mch_id].lottery_id
        var __creat_time = rooms[socket.mch_id].create_time
        console.log("[start]2-4:实时汇总:当前房间现有在线人数:" + userArr.length)
        // userArr.forEach((user, i) => {
        //   // 通知前台用户规则和要参与的抽奖号
        //   user["socket"].emit('game_open', setting, lottery_id)
        //   console.log("[start]2-5:通知:已通知到第" + (i + 1) + "个人")
        // })
        socket.emit('open',setting,__lottery_id,__creat_time)
        userArr.forEach((player, i) => {
          if (player.nick == user.nick) {
            player.isPlayer = true
          }
          if (player.isPlayer) {
            // 如果是本房间的玩家，就发送通知
            player.socket.emit("join", user)
          }
        })
      }
      if (rooms[socket.mch_id].status == 2) {
        socket.emit('ending',0)
      }
    }

    console.log("[login]1-2:[" + user.mch_id + "]房间当前人数为:" + rooms[user.mch_id].userArr.length)

    //向所有客户端广播用户加入
    // io.emit('login', {onlineUsers:onlineUsers, onlineCount:onlineCount, user:obj,login:true});
    // console.log(user.userid+'加入了聊天室');
  });

  // 开启房间 [2-back]
  socket.on('start', function (setting) {

    // 1、初始化房间状态
    rooms[socket.mch_id].status = 0
    rooms[socket.mch_id].setting = null
    rooms[socket.mch_id].lottery_id = null
    luckerArr[socket.mch_id] = []

    // 2、后台打印一个抽奖事件
    console.log("[start]2-1:[" + setting.mch_id + "]商户开启了,规则为[金额:'" + setting.price + "'|中奖人数:" + setting.luck_num + "|奖品:" + setting.prize + "]")

    // 2.1 缓存中奖人数
    luck_num[socket.mch_id] = setting.luck_num

    // 3、通知数据库序列化一个抽奖
    lottery.lottery_add(socket.mch_id, setting)
      .then((ret) => {
        console.log("[start]2-2:" + socket.mch_id + '数据库创建完成:得到一个抽奖流水号为lottery_id=' + ret.dataValues.lottery_id)

        // 单据如果为空则置[]数组
        lists[socket.mch_id] = lists[socket.msch_id] == undefined ? [] : lists[socket.msch_id]

        lists[socket.mch_id].push({
          code: ret.lottery_code,
          luck_num: ret.luck_num,
          price: ret.price,
          prize: ret.prize
        })

        lottery_id_arr[socket.mch_id] = ret.dataValues.lottery_id
        rooms[socket.mch_id].lottery_id = lottery_id_arr[socket.mch_id]
        // 1为可参加状态
        rooms[socket.mch_id].status = 1
        rooms[socket.mch_id].setting = setting
        rooms[socket.mch_id].create_time = ret.create_time

        // 4、将商户抽奖对象初始化
        console.log("[start]2-3:实时汇总:当前正在进行的抽奖房间数:" + Object.keys(rooms).length)
        var userArr = rooms[socket.mch_id].userArr
        console.log("[start]2-4:实时汇总:当前房间现有在线人数:" + userArr.length)
        userArr.forEach((user, i) => {
          // 通知前台用户规则和要参与的抽奖号
          user["socket"].emit('open', setting, lottery_id_arr[socket.mch_id],rooms[socket.mch_id].create_time)
          console.log(setting)
          console.log(lottery_id_arr[socket.mch_id])
          console.log("[start]2-5:通知:已通知到第" + (i + 1) + "个人")
        })

        // 3、开始定时
        console.log("[start]3:" + socket.mch_id + "开始定时")

        setTimeout(function () {

          // console.log('id1:'+lottery_id[setting.mch_id])

          // 7、到期后执行抽奖
          console.log("6:时间到开启的商户抽奖号为" + lottery_id_arr[socket.mch_id])
          
          // 告诉所有人等待开奖
          rooms[socket.mch_id].status = 2
          console.log(socket.mch_id + "号房间状态为开奖中")
          rooms[socket.mch_id].userArr.forEach((player, i) => {
            console.log("[ending]-通知开奖中..."+(i+1))
            player.socket.emit('ending',1)
          })

          console.log("通知开奖状态结束－等10秒开始开奖")

          setTimeout(function(){
            console.log("时间到,开奖")
            rander.getRander(lottery_id_arr[socket.mch_id], luck_num[socket.mch_id])
            .then((ret) => {
              console.log("[end]6.5-中奖人是"+ret)
              ret.forEach(function(lucker,i){
                luckerArr[socket.mch_id].push({nick:lucker.nick})
              })
              // 7、 通知所有人(onlinePlayers)开奖
              rooms[socket.mch_id].userArr.forEach((player, i) => {
                if (player.isPlayer) {
                  console.log("[start]7-通知结果[已通知]" + (i + 1) + "人")
                  player.socket.emit("end", luckerArr[socket.mch_id])
                }
                if (player.isOwner) {
                  var arr = lists[socket.mch_id]
                  console.log("[start]7-通知结果-管理员[已通知]" + (i + 1) + "人")
                  player.socket.emit("end", arr[arr.length - 1], luckerArr[socket.mch_id])
                }
              })
              rooms[socket.mch_id].userArr = []
              rooms[socket.mch_id].status = 0
              rooms[socket.mch_id].setting = null
              rooms[socket.mch_id].lottery_id = null

            })
            .catch((error) => {
              console.log(error)
            })

          },10000)

        }, 30000)

      })

  })

  socket.on('join', function (user, lottery_id) {
    console.log("[join]4:加入了一个用户" + user.nick)
    lotteryDetails.join(user, lottery_id)
      .then((ret) => {
        rooms[user.mch_id].userArr.forEach((player, i) => {
          if (player.nick == user.nick) {
            player.isPlayer = true
          }
          if (player.isPlayer) {
            // 如果是本房间的玩家，就发送通知
            player.socket.emit("notify", user)
          }
        })
      })
  })

  socket.on('getSecond',function(mch_id){
    // rooms[socket.mch_id].create_time
    var limit = new Date(new Date().getTime() + 8*60*60*1000).getTime() - new Date(rooms[mch_id].create_time).getTime()
    socket.emit('getSecond',limit)
    console.log(limit)
    // console.log(rooms[mch_id].create_time)
    // csocket.emit('getSecond',1)
  })

  //监听用户退出
  socket.on('disconnect', function () {
    //将退出的用户从在线列表中删除
    if (onlineUsers.hasOwnProperty(socket.name)) {
      //退出用户的信息
      var obj = { userid: socket.name, username: onlineUsers[socket.name] };

      //删除
      delete onlineUsers[socket.name];
      //在线人数-1
      onlineCount--;

      //向所有客户端广播用户退出
      io.emit('logout', { onlineUsers: onlineUsers, onlineCount: onlineCount, user: obj, logout: true });
      console.log(obj.username + '退出了聊天室');
    }
  });

});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
